import contextlib

from docutils.parsers.rst.states import Inliner


@contextlib.contextmanager
def overridden_default_literal_role(role: str):
    """Overrides the role generated by double backticks literal syntax.

    Normally, double backticks:

        ``abc``

    is equivalent to the literal role:

        :literal:`abc`

    This context manager globally overrides the role to instead be the specified
    `role`.
    """

    literal_key = "``"

    orig_literal = Inliner.dispatch[literal_key]

    def literal(self: Inliner, match, lineno: int):
        def nodeclass(rawsource: str, text: str):
            return self.interpreted(rawsource, text, role, lineno)

        nodeclass.__name__ = "literal"

        before, inlines, remaining, sysmessages, endstring = self.inline_obj(
            match, lineno, self.patterns.literal, nodeclass  # type: ignore[arg-type]
        )

        if len(inlines) == 1 and isinstance(inlines[0], tuple):
            inlines, extra_messages = inlines[0]
            sysmessages = sysmessages + extra_messages

        return before, inlines, remaining, sysmessages

    try:
        Inliner.dispatch[literal_key] = literal  # type: ignore[assignment]
        yield
    finally:
        Inliner.dispatch[literal_key] = orig_literal
