[build-system]
requires = ["setuptools>=42", "wheel", "setuptools_scm"]

[tool.mypy]
show_error_codes = true
pretty = true
mypy_path = "typings_py"
files = [
    "sphinx_immaterial/**/*.py",
    "tests/**/*.py",
]
exclude = "setup.py"
plugins = ["pydantic.mypy"]
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]

[tool.coverage.run]
source = ["sphinx_immaterial"]
dynamic_context = "test_function"
# These options are useful if combining coverage data from multiple tested envs
parallel = true
relative_files = true
omit = [
    "sphinx_immaterial/.icons/**/*",
    "sphinx_immaterial/bundles/*",
    "sphinx_immaterial/partials/**/*",
    "sphinx_immaterial/*.html",
    "sphinx_immaterial/LICENSE",
    "sphinx_immaterial/theme.conf",
]

[tool.coverage.report]
skip_empty = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    # the point of unit tests is to test parts of main()
    "def main",
    # ignore any branch that makes the module executable
    'if __name__ == "__main__"',
    # ignore missing implementations
    "raise NotImplementedError",
    # ignore the type checking specific code (only executed by mypy)
    "if typing.TYPE_CHECKING",
    # ignore import errors for conditional deps (test run with a strict set of deps)
    "except ImportError",
]

[tool.coverage.html]
show_contexts = true
