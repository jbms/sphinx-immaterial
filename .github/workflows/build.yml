name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 1,16 * *'

jobs:
  check_conventions:
    runs-on: ubuntu-latest
    env:
      node-version: '16.x'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: Setup python v3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Setup python v3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Setup python v3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup python v3.11
        uses: actions/setup-python@v4
        id: python-setup
        with:
          python-version: '3.11'
      - name: Cache node.js modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ env.node-version }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - name: Cache nox environments
        uses: actions/cache@v3
        with:
          path: |
            .nox/black
            .nox/check_*
          key: nox-${{ steps.python-setup.outputs.python-version }}-${{ hashFiles('requirements/dev-black.txt', 'requirements/dev-pre_commit_hooks.txt') }}
      - run: npm install
      - run: npm run check
      - run: pipx run nox
        # by default, nox will run mypy, pylint, black, and check_[yaml,json,toml,eof,trailing_space,lf]

  build:
    needs: [check_conventions]
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
        python-version:
          - '3.x'
        node-version:
          - '16.x'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Need full history to determine version number.
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache node.js modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
      - name: Check for dirty working directory
        run: git diff --exit-code
      - name: Build wheel
        run: pipx run nox -s dists
      - name: Show package version
        run: python setup.py --version
      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages-${{ runner.os }}
          path: |
            dist/*.whl
            dist/*.tar.*

  test:
    needs: [check_conventions]
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
        node-version:
          - '16.x'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Setup python v3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Setup python v3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Setup python v3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup python v3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache node.js modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
      - name: Build CSS and JS bundles
        run: npm run build
      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@c001ccfb5aff62e28bda6a6c39b59a7e061be5b9 # v1.2.0
        with:
          macos-skip-brew-update: 'true'
      - run: python -m pip install nox
      - name: Run Python tests
        # `coverage run` cmd adds the working dir to python path, so no need to install pkg here
        # NOTE: tests are run with different versions of sphinx (using a nox venv)
        run: nox -s tests
      - name: Build docs
        # NOTE: docs are only built with latest sphinx version (using the system env)
        run: nox -s docs
      - name: Upload doc builds as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: doc-builds-${{ runner.os }}
          path: docs/_build/
      - name: upload docs to github pages
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && runner.os == 'Linux'
        uses: peaceiris/actions-gh-pages@de7ea6f8efb354206b205ef54722213d99067935 # pinned to v3.9.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
      - name: Create coverage report
        run: nox -s coverage
      - name: Upload comprehensive coverage HTML report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-${{ runner.os }}
          path: htmlcov/
      - name: Post coverage summary
        shell: bash
        run: |
          echo "### ${{ runner.os }}"$'\n' >> $GITHUB_STEP_SUMMARY
          cat .coverage_.md >> $GITHUB_STEP_SUMMARY

  compare-wheels:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Linux package
        uses: actions/download-artifact@v3
        with:
          name: python-packages-Linux
          path: dist-Linux
      - name: Download macOS package
        uses: actions/download-artifact@v3
        with:
          name: python-packages-macOS
          path: dist-macOS
      - name: Download Windows package
        uses: actions/download-artifact@v3
        with:
          name: python-packages-Windows
          path: dist-Windows
      - name: Unzip wheels
        run: |
          for os in Linux Windows macOS; do
            unzip -d pkg-$os dist-$os/*.whl
          done
      - name: Compare macOS wheel to Linux wheel
        run: diff -ur --color=always pkg-Linux pkg-macOS
      - name: Compare Windows wheel to Linux wheel
        run: diff -ur --color=always pkg-Windows pkg-Windows

  python-publish-package:
    # Only publish package on push to tag or default branch.
    if: ${{ github.event_name == 'push' && github.repository == 'jbms/sphinx-immaterial' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: python-packages-Linux
          path: dist
      - name: Publish to PyPI (test server)
        uses: pypa/gh-action-pypi-publish@54b39fb9371c0b3a6f9f14bb8a67394defc7a806 # 2020-09-25
        continue-on-error: true
        with:
          user: __token__
          password: ${{ secrets.pypi_test_token }}
          repository_url: https://test.pypi.org/legacy/
        if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
      - name: Publish to PyPI (main server)
        uses: pypa/gh-action-pypi-publish@54b39fb9371c0b3a6f9f14bb8a67394defc7a806 # 2020-09-25
        with:
          user: __token__
          password: ${{ secrets.pypi_token }}
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
